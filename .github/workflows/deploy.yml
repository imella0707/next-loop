name: Issue Branch Deploy

on:
  pull_request:
    types: [closed]
    branches: 
      - '26-issue-2'
    paths:
      - 'airflow/**'
      - 'backend/**'
      - 'kafka/**'
      - 'mariadb/**'

jobs:
  detect-changes:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == '26-issue-2'
    runs-on: ubuntu-latest
    outputs:
      airflow: ${{ steps.filter.outputs.airflow }}
      backend: ${{ steps.filter.outputs.backend }}
      kafka: ${{ steps.filter.outputs.kafka }}
      mariadb: ${{ steps.filter.outputs.mariadb }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: '26-issue-2'

      - name: Filter paths for each component
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            airflow:
              - 'airflow/**'
            backend:
              - 'backend/**'
            kafka:
              - 'kafka/**'
            mariadb:
              - 'mariadb/**'

  deploy-airflow:
    needs: detect-changes
    if: needs.detect-changes.outputs.airflow == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_MARIADB_HOST: ${{ secrets.SERVER_MARIADB_HOST }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          REPO_URL: ${{ secrets.REPO_URL }}  # REPO_URL 환경 변수 설정
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $SERVER_MARIADB_HOST >> ~/.ssh/known_hosts
          
      - name: Deploy Airflow Changes
        run: |
          ssh -i ~/.ssh/deploy_key $SERVER_USERNAME@$SERVER_MARIADB_HOST '
            ssh airflow "
              if [ ! -d ~/airflow-production/.git ]; then
                rm -rf ~/airflow-production
                git init ~/airflow-production
                cd ~/airflow-production
                git remote add origin $REPO_URL
                git config core.sparseCheckout true
                echo 'airflow/' >> .git/info/sparse-checkout
                git pull origin 26-issue-2
              else
                cd ~/airflow-production
                git fetch origin 26-issue-2
                git checkout 26-issue-2 -- airflow/
              fi
            "
          '

  deploy-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_MARIADB_HOST: ${{ secrets.SERVER_MARIADB_HOST }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          REPO_URL: ${{ secrets.REPO_URL }}  # REPO_URL 환경 변수 설정
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $SERVER_MARIADB_HOST >> ~/.ssh/known_hosts
          
      - name: Deploy backend Changes      
        run: |
          ssh -i ~/.ssh/deploy_key $SERVER_USERNAME@$SERVER_MARIADB_HOST '
            ssh backend "
              if [ ! -d ~/backend-production/.git ]; then
                rm -rf ~/backend-production
                git init ~/backend-production
                cd ~/backend-production
                git remote add origin $REPO_URL
                git config core.sparseCheckout true
                echo 'backend/' >> .git/info/sparse-checkout
                git pull origin 26-issue-2
              else
                cd ~/backend-production
                git fetch origin 26-issue-2
                git checkout 26-issue-2 -- backend/
              fi
            "
          '

  deploy-mariadb:
    needs: detect-changes
    if: needs.detect-changes.outputs.mariadb == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_MARIADB_HOST: ${{ secrets.SERVER_MARIADB_HOST }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          REPO_URL: ${{ secrets.REPO_URL }}  # REPO_URL 환경 변수 설정
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $SERVER_MARIADB_HOST >> ~/.ssh/known_hosts
          
      - name: Deploy mariadb Changes      
        run: |
          ssh -i ~/.ssh/deploy_key $SERVER_USERNAME@$SERVER_MARIADB_HOST '
            ssh mariadb "
              echo "hello github actions" >> ./test.txt
              if [ ! -d ~/mariadb-production/.git ]; then
                rm -rf ~/mariadb-production
                git init ~/mariadb-production
                cd ~/mariadb-production
                git remote add origin $REPO_URL
                git config core.sparseCheckout true
                echo 'mariadb/' >> .git/info/sparse-checkout
                git pull origin 26-issue-2
              else
                cd ~/mariadb-production
                git fetch origin 26-issue-2
                git checkout 26-issue-2 -- mariadb/
              fi
            "
          '

  deploy-kafka:
    needs: detect-changes
    if: needs.detect-changes.outputs.kafka == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_MARIADB_HOST: ${{ secrets.SERVER_MARIADB_HOST }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          REPO_URL: ${{ secrets.REPO_URL }}  # REPO_URL 환경 변수 설정
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $SERVER_MARIADB_HOST >> ~/.ssh/known_hosts
          
      - name: Deploy kafka Changes      
        run: |
          ssh -i ~/.ssh/deploy_key $SERVER_USERNAME@$SERVER_MARIADB_HOST '
            ssh kafka "
              if [ ! -d ~/kafka-production/.git ]; then
                rm -rf ~/kafka-production
                git init ~/kafka-production
                cd ~/kafka-production
                git remote add origin $REPO_URL
                git config core.sparseCheckout true
                echo 'kafka/' >> .git/info/sparse-checkout
                git pull origin 26-issue-2
              else
                cd ~/kafka-production
                git fetch origin 26-issue-2
                git checkout 26-issue-2 -- kafka/
              fi
            "
          '
